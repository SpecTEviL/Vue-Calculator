{"remainingRequest":"/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/babel-loader/lib/index.js!/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/src/App.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/src/App.vue","mtime":1611236208183},{"path":"/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":1610713074860},{"path":"/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/babel-loader/lib/index.js","mtime":1610713074869},{"path":"/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":1610713074860},{"path":"/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/node_modules/vue-loader-v16/dist/index.js","mtime":1610713081193}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdBcHAnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBmb3JtVmFsdWVzOiB7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgcHJvZmlsZVN1bW1hcnk6ICcnLAogICAgICAgIGNvdW50cnk6ICcnLAogICAgICAgIGpvYmxvY2F0aW9uOiBbXSwKICAgICAgICByZW1vdGVXb3JrOiBmYWxzZSwKICAgICAgICBza2lsbHNldDogW10sCiAgICAgICAgZXhwZXJpZW5jZTogJycsCiAgICAgICAgYWdlOiBudWxsCiAgICAgIH0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBzdWJtaXRGb3JtOiBmdW5jdGlvbiBzdWJtaXRGb3JtKCkgewogICAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAvLyB0byBwcmV2ZW50IHRoZSBwYWdlIGZyb20gcmVsb2FkaW5nIGFmdGVyIHN1Ym1pdCBpcyBwcmVzc2VkCiAgICAgIGNvbnNvbGUubG9nKCJGb3JtIHZhbHVlcyIsIHRoaXMuZm9ybVZhbHVlcyk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/Users/vishalpatil/1. Programming/9. YT Tutorials/Vue.js Codevolution/hello-world/src/App.vue"],"names":[],"mappings":"AA2FA,eAAe;AACX,EAAA,IAAI,EAAE,KADK;AAEX,EAAA,IAFW,kBAEJ;AACH,WAAO;AACH,MAAA,UAAU,EAAE;AACR,QAAA,IAAI,EAAE,EADE;AAER,QAAA,cAAc,EAAE,EAFR;AAGR,QAAA,OAAO,EAAE,EAHD;AAIR,QAAA,WAAW,EAAE,EAJL;AAKR,QAAA,UAAU,EAAE,KALJ;AAMR,QAAA,QAAQ,EAAE,EANF;AAOR,QAAA,UAAU,EAAE,EAPJ;AAQR,QAAA,GAAG,EAAE;AARG;AADT,KAAP;AAaH,GAhBU;AAiBX,EAAA,OAAO,EAAE;AACL,IAAA,UADK,wBACQ;AACT;AACA;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,KAAK,UAAhC;AACJ;AALK;AAjBE,CAAf","sourcesContent":["<!-- Form Handling and Modifiers -->\n<!-- template block - it defines the structure. Its like the html -->\n<template>\n    <!-- modifiers are the suffix we can add to either the v-on directive or the v-model directive to add some functionality inline within the template -->\n    <!-- the trim modifier deletes the unwanted space before and after the text -->\n    <!-- the number modifier ensures that the input is number -->\n    <!-- the lazy modifier is used to not reflect the changes by the user immediately but is used to show them once the whole changes are begin made completely. It is very useful for form validation where after the user has changed the value then the validation is started -->\n    <!-- the prevent modifier is used to to prevent the page from taking default actions. E.g. reloading of page once the submit button is pressed -->\n    <!-- the key modifier is used to bind the keyboard key with the method calling. E.g. when the enter key is pressed the submit action is initiated and the form is submitted -->\n    <div>\n        <pre>\n            {{ JSON.stringify(formValues, null, 2) }}\n        </pre>\n    </div>\n    <form @submit.prevent=\"submitForm\">\n    <!-- here the prevent modifier is used to prevent the page from reloading once the submit button has been pressed -->\n        \n        <!-- textinput -->\n        <div>\n            <label for=\"name\">Name</label>\n            <input type=\"text\" id=\"name\" v-model.trim.lazy=\"formValues.name\">\n            <!-- we use the v-model to bind the data taken as input and link it with the data properties in the script -->\n            <!-- here the modifier trim is used to delete the unwanted space which has been typed by the user. It trims the unwanted space before the text and after the text -->\n        </div>\n        <!-- textarea -->\n        <div>\n            <label for=\"profile\">Profile Summary</label>\n            <textarea id=\"profile\" v-model=\"formValues.profileSummary\" />\n        </div>\n        <!-- number field to input only number using the modifier .number -->\n        <div>\n            <label @keyup.enter=\"submitForm\" for=\"age\">Age</label>\n            <!-- the .enter is used to ensure the form gets submitted once enter is pressed -->\n            <input type=\"number\" id=\"age\" v-model.number=\"formValues.age\">\n        </div>\n        <!-- single select -->\n        <div>\n            <label for=\"country\">Country</label>\n            <select id=\"country\" v-model=\"formValues.country\">\n                <option value=\"\">Select a Country</option>\n                <option value=\"india\">India</option>\n                <option value=\"china\">China</option>\n                <option value=\"Japan\">Japan</option>\n            </select>\n        </div>\n        <!-- multiple select -->\n        <div>\n            <label for=\"job-location\">Job Location</label>\n            <select id=\"job-location\" multiple v-model=\"formValues.joblocation\">\n                <option value=\"\">Select a Country</option>\n                <option value=\"india\">India</option>\n                <option value=\"china\">China</option>\n                <option value=\"Japan\">Japan</option>\n                <option value=\"USA\">USA</option>\n            </select>\n        </div>\n        <!-- single checkbox -->\n        <div>\n            <input type=\"checkbox\" id=\"remoteWork\" v-model=\"formValues.remoteWork\" true-value=\"yes\" false-value=\"no\">\n            <label for=\"remoteWork\">Open to remote work?</label>\n        </div>\n        <!-- multiple checkbox -->\n        <div>\n            <label>Skillset</label>\n            <input type=\"checkbox\" id=\"html\" value=\"html\" v-model=\"formValues.skillset\">\n            <label for=\"html\">HTML</label>\n            <input type=\"checkbox\" id=\"css\" value=\"css\" v-model=\"formValues.skillset\">\n            <label for=\"css\">CSS</label>\n            <input type=\"checkbox\" id=\"js\" value=\"js\" v-model=\"formValues.skillset\">\n            <label for=\"js\">JS</label>\n        </div>\n        <!-- radio group -->\n        <div>\n            <label>Years of Experience</label>\n            <input type=\"radio\" id=\"0-2\" value=\"0-2\" v-model=\"formValues.experience\">\n            <label for=\"0-2\">0-2</label>\n            <input type=\"radio\" id=\"3-5\" value=\"3-5\" v-model=\"formValues.experience\">\n            <label for=\"3-5\">3-5</label>\n            <input type=\"radio\" id=\"6-10\" value=\"6-10\" v-model=\"formValues.experience\">\n            <label for=\"6-10\">6-10</label>\n        </div>\n        <!-- submit button -->\n        <!-- <div>\n            <button>Submit</button>\n        </div> -->\n    </form>\n    <h2>The End</h2>\n</template>\n\n<!-- script block - the data and the logic for the template is maintained. Its similar to JS -->\n<script>\nexport default {\n    name: 'App',\n    data() {\n        return {\n            formValues: {\n                name: '',\n                profileSummary: '',\n                country: '',\n                joblocation: [],\n                remoteWork: false,\n                skillset: [],\n                experience: '',\n                age: null,\n\n            }  \n        }\n    },\n    methods: {\n        submitForm() {\n            // event.preventDefault();\n            // to prevent the page from reloading after submit is pressed\n            console.log(\"Form values\", this.formValues);\n        }\n    },\n};\n</script>\n\n<!-- style block - here we style the markup template elements -->\n<style>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    /* text-align: center; */\n    color: #2c3e50;\n    margin-top: 60px;\n}\n\nlabel {\n    font-weight: bold;\n    display: flex;\n    margin-bottom: 5px;\n}\n\ninput + label {\n    font-weight: bold;\n    display: flex;\n    margin-right: 20px;\n}\n\ninput[type='text'],\ntextarea,\nselect {\n    display: inline-block;\n    width: 400px;\n    padding: 6px 12px;\n    font-size: 14px;\n    line-height: 1.42857143;\n    color: #555;\n    background-color: #fff;\n    background-image: none;\n}\n\n</style>"],"sourceRoot":""}]}